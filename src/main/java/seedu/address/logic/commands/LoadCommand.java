package seedu.address.logic.commands;

import static java.util.Objects.requireNonNull;

import java.io.File;
import java.nio.file.Path;
import java.util.Optional;

import javafx.stage.FileChooser;
import seedu.address.commons.exceptions.DataConversionException;
import seedu.address.logic.commands.exceptions.CommandException;
import seedu.address.model.Model;
import seedu.address.model.ReadOnlyAddressBook;
import seedu.address.storage.JsonAddressBookStorage;

public class LoadCommand extends Command {
    public static final String COMMAND_WORD = "load";

    public static final String MESSAGE_SUCCESS = "Contents of %1$s loaded successfully!";
    public static final String MESSAGE_NO_FILE_SELECTED = "No data file has been selected!";
    public static final String MESSAGE_NOT_MODCHECK_READABLE_FILE = "Data file cannot be read by ModCheck!\n" +
            "Please only load data files generated by ModCheck.";
    public static final String MESSAGE_ADDRESS_BOOK_EMPTY = "Address book chosen is empty!";

    @Override
    public CommandResult execute(Model model) throws CommandException {
        requireNonNull(model);

        File selectedFile = getFileWithFileChooser();
        if (selectedFile == null) {
            throw new CommandException(MESSAGE_NO_FILE_SELECTED);
        }

        Optional<ReadOnlyAddressBook> newAddressBook;
        try {
            newAddressBook = readFile(selectedFile);
        } catch (DataConversionException e) {
            throw new CommandException(MESSAGE_NOT_MODCHECK_READABLE_FILE);
        }

        model.combine(newAddressBook.orElseThrow(() -> new CommandException(MESSAGE_ADDRESS_BOOK_EMPTY)),
                selectedFile.getPath());

        return new CommandResult(String.format(MESSAGE_SUCCESS, selectedFile));
    }

    private File getFileWithFileChooser() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Open ModCheck data file");
        fileChooser.getExtensionFilters().add(
                new FileChooser.ExtensionFilter("JSON file", "*.json")
        );
        //Potentially unsafe implementation to use null argument in showOpenDialog()
        //Done this way as Stage object is not easily accessible within Logic
        File selectedFile = fileChooser.showOpenDialog(null);
        return selectedFile;
    }

    private Optional<ReadOnlyAddressBook> readFile(File selectedFile) throws DataConversionException {
        Path selectedFilePath = selectedFile.toPath();
        Optional<ReadOnlyAddressBook> newAddressBook = new JsonAddressBookStorage(selectedFilePath).readAddressBook();
        return newAddressBook;
    }
}
